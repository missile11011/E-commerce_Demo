{"version":3,"sources":["logo.svg","components/Nav/index.js","components/Main/index.js","pages/Home.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["NavigationBar","Navbar","bg","variant","expand","Container","fluid","Brand","as","Link","to","class","Form","inline","Row","Group","Control","type","placeholder","style","columns","Image","src","maxHeight","position","top","bottom","right","Main","Home","Jumbotron","className","NavFooter","title","href","httpLink","createHttpLink","uri","authLink","setContext","_","headers","token","localStorage","getItem","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","Nav","exact","path","component","Footer","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9f45cb7f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Navbar, Nav, Container, Form, Row, Button, Image, Col} from \"react-bootstrap\";\r\n\r\nconst NavigationBar = () => {\r\n\t// set modal display state\r\n\tconst shopingcart = () => {\r\n\t\treturn (\r\n\t\t\t<> <div class=\"row align-items-center px-2\" style={{ columns: \"50px\"}}>\r\n\t\t\t\t\t<Image src={process.env.PUBLIC_URL + '/images/shopping-cart.png'} style={{ maxHeight: '50px', position: \"relative\", top: \"0px\" }}/>\r\n\t\t\t\t\t<p class=\"text-white text-center\" style={{ position: \"relative\", bottom: \"0px\", right: \"30px\"}}>0</p>\r\n\t\t\t\t</div>\t\r\n\t\t\t</>\r\n\t\t\t)\r\n\t\t\r\n\t}\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\r\n\t\t\t\t<Container fluid>\r\n\t\t\t\t\t<Navbar.Brand as={Link} to=\"/\">\r\n\t\t\t\t\t\tDemo\r\n\t\t\t\t\t</Navbar.Brand>\r\n\t\t\t\t\t<div class=\"row inline\">\r\n\t\t\t\t\t\t<Form inline as={Row}>\r\n\t\t\t\t\t\t\t<Form.Group>\r\n\t\t\t\t\t\t\t\t<Form.Control  type=\"search\" placeholder=\"search\"/>\r\n\t\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t\t<button class=\"px-3 m-2 btn btn-outline-success\" variant=\"outline-success\" type=\"submit\">Search</button>\r\n\t\t\t\t\t\t</Form>\r\n\t\t\t\t\t\t<button inline class=\"m-3 btn btn-primary\" variant=\"primary\">Login</button>\r\n\t\t\t\t\t\t{shopingcart()}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Container>\r\n\t\t\t</Navbar>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default NavigationBar;\r\n","import React from \"react\";\r\nimport {} from \"react-bootstrap\"\r\n\r\nconst Main = () => {\r\n    return(\r\n        <div>\r\n            <h1 class=\"align-center text-center py-5\">Hello</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport Main from '../components/Main'\r\nimport { Jumbotron, Container,Image } from 'react-bootstrap';\r\n\r\nconst Home = () =>{\r\n    return(\r\n        <>\r\n            <Main/>\r\n            <Jumbotron fluid className='text-light bg-dark'>\r\n                <Container>\r\n                    <h1>Viewing saved books!</h1>\r\n                </Container>\r\n            </Jumbotron>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Home;","import React from \"react\";\r\nimport { Col, Container, Row } from 'react-bootstrap';\r\n\r\nconst NavFooter = () => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Container fluid className=\"bg-dark\">\r\n                <Row>\r\n                    <div class=\"col-6 col-md-8 col-lg-7\">\r\n                        <div class=\"row text-center m-auto\">\r\n                            <div class=\"col-sm-6 col-md-4 col-lg-4 col-12 py-4\">\r\n                                <ul class=\"list-unstyled\">\r\n                                    <li class=\"btn-link\"> <a>Link anchor</a> </li>\r\n                                    <li class=\"btn-link\"> <a>Link anchor</a> </li>\r\n                                    <li class=\"btn-link\"> <a>Link anchor</a> </li>\r\n                                    <li class=\"btn-link\"> <a>Link anchor</a> </li>\r\n                                    <li class=\"btn-link\"> <a>Link anchor</a> </li>\r\n                                </ul>\r\n                            </div>\r\n                            <div class=\"col-sm-6 col-md-4 col-lg-4 col-12 py-4\">\r\n                                <ul class=\"list-unstyled\">\r\n                                    <li class=\"btn-link\"> <a>Link anchor</a> </li>\r\n                                    <li class=\"btn-link\"> <a>Link anchor</a> </li>\r\n                                    <li class=\"btn-link\"> <a>Link anchor</a> </li>\r\n                                    <li class=\"btn-link\"> <a>Link anchor</a> </li>\r\n                                    <li class=\"btn-link\"> <a>Link anchor</a> </li>\r\n                                </ul>\r\n                            </div>\r\n                            \r\n                        </div>\r\n                    </div>\r\n                    <div class=\"col-md-4 col-lg-5 col-6 py-4\">\r\n                        <address class=\"text-white\">\r\n                            <strong>MyStoreFront, Inc.</strong><br></br>\r\n                            Indian Treasure Link<br></br>\r\n                            Quitman, WA, 99110-0219<br></br>\r\n                            <abbr title=\"Phone\">P:</abbr> (123) 456-7890\r\n                        </address>\r\n                        <address  class=\"text-white\">\r\n                            <strong>Full Name</strong><br></br>\r\n                            <a href=\"mailto:#\">first.last@example.com</a>\r\n                        </address>\r\n                    </div>\r\n                </Row>\r\n                <Row>\r\n                    <p class=\"text-white m-auto p-2\" >\r\n                        Â©2021 copyrihgt\r\n                    </p>\r\n                </Row>\r\n            </Container>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default NavFooter;\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Nav from \"./components/Nav\"\r\nimport Home from \"./pages/Home.js\"\r\nimport Footer from \"./components/Footer\"\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport {\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  ApolloProvider,\r\n  createHttpLink,\r\n} from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\n\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: '/graphql',\r\n});\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  const token = localStorage.getItem('id_token');\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : '',\r\n    },\r\n  };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n        <Nav/>\r\n        <Switch>\r\n          <Route exact path='/' component={Home} />\r\n        </Switch>\r\n        <Footer/>\r\n      </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n\twindow.location.hostname === \"localhost\" ||\r\n\t\t// [::1] is the IPv6 localhost address.\r\n\t\twindow.location.hostname === \"[::1]\" ||\r\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\r\n\t\twindow.location.hostname.match(\r\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n\t\t)\r\n);\r\n\r\nexport function register(config) {\r\n\tif (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n\t\t// The URL constructor is available in all browsers that support SW.\r\n\r\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n\t\tif (publicUrl.origin !== window.location.origin) {\r\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\r\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\r\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\twindow.addEventListener(\"load\", () => {\r\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n\t\t\tif (isLocalhost) {\r\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\r\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\r\n\r\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\r\n\t\t\t\t// service worker/PWA documentation.\r\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\r\n\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\"This web app is being served cache-first by a service \" +\r\n\t\t\t\t\t\t\t\"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// Is not localhost. Just register service worker\r\n\t\t\t\tregisterValidSW(swUrl, config);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n\tnavigator.serviceWorker\r\n\t\t.register(swUrl)\r\n\t\t.then((registration) => {\r\n\t\t\tregistration.onupdatefound = () => {\r\n\t\t\t\tconst installingWorker = registration.installing;\r\n\t\t\t\tif (installingWorker == null) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tinstallingWorker.onstatechange = () => {\r\n\t\t\t\t\tif (installingWorker.state === \"installed\") {\r\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\r\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\r\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\r\n\t\t\t\t\t\t\t// content until all client tabs are closed.\r\n\t\t\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\t\t\"New content is available and will be used when all \" +\r\n\t\t\t\t\t\t\t\t\t\"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t// Execute callback\r\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\r\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// At this point, everything has been precached.\r\n\t\t\t\t\t\t\t// It's the perfect time to display a\r\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\r\n\t\t\t\t\t\t\tconsole.log(\"Content is cached for offline use.\");\r\n\r\n\t\t\t\t\t\t\t// Execute callback\r\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\r\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t};\r\n\t\t})\r\n\t\t.catch((error) => {\r\n\t\t\tconsole.error(\"Error during service worker registration:\", error);\r\n\t\t});\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n\t// Check if the service worker can be found. If it can't reload the page.\r\n\tfetch(swUrl, {\r\n\t\theaders: { \"Service-Worker\": \"script\" },\r\n\t})\r\n\t\t.then((response) => {\r\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\r\n\t\t\tconst contentType = response.headers.get(\"content-type\");\r\n\t\t\tif (\r\n\t\t\t\tresponse.status === 404 ||\r\n\t\t\t\t(contentType != null &&\r\n\t\t\t\t\tcontentType.indexOf(\"javascript\") === -1)\r\n\t\t\t) {\r\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\r\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\r\n\t\t\t\t\tregistration.unregister().then(() => {\r\n\t\t\t\t\t\twindow.location.reload();\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// Service worker found. Proceed as normal.\r\n\t\t\t\tregisterValidSW(swUrl, config);\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch(() => {\r\n\t\t\tconsole.log(\r\n\t\t\t\t\"No internet connection found. App is running in offline mode.\"\r\n\t\t\t);\r\n\t\t});\r\n}\r\n\r\nexport function unregister() {\r\n\tif (\"serviceWorker\" in navigator) {\r\n\t\tnavigator.serviceWorker.ready\r\n\t\t\t.then((registration) => {\r\n\t\t\t\tregistration.unregister();\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tconsole.error(error.message);\r\n\t\t\t});\r\n\t}\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nserviceWorker.register();\r\n"],"sourceRoot":""}